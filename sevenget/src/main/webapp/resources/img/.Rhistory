| Ward Linkage | 군집내 편차들의 제곱합을 고려 |
<br>
> Dendrogram을 통해 군집화된 뉴스 기사들을 볼 수 있다.
```{r}
plot(clust_h, main = '계층적 군집분석', xlab = '뉴스 기사 번호')
abline(h=35,col="red")
```
* clustering 되어진 형태를 볼 수 있고, 3를 기준으로 Dendogram을 나누어 보았음
+ `abline(h=30,col="red")` : **h = 35**에 **붉은색** 라인을 생성함
<br>
> 군집화된 뉴스 기사들의 제목으로 Dendrogram을 확인 해보자.
```{r, fig.width=16, fig.height=10}
plot(clust_h, main='계층적 군집분석', xlab='뉴스 기사 제목', labels=news_topic2$V3)
```
* `labels= news_topic2$V3` : **E.2** 에서 만든 `news_topic2` 오브젝트의 **V3**변수는 뉴스 기사의 제목이고 `labels`의 옵션으로 설정해 줌
<br>
# F. Association Rules 적용하기
> 본 장에서는 Association Rules를 통하여 Term들 사이의 연관성을 알아보도록 한다.
>> 연관규칙분석(association rule analysis)은 데이터베이스에서 사건의 연관규칙을 찾는 무방향성 데이터마이닝 기법이다.
>> 주로 마케팅에서 고객의 장바구니에 들어있는 품목 간의 관계를 탐구하기 위해 많이 사용한다.
>> R에서는 arules package 를 이용하여 연관규칙분석을 할 수 있다.
<br>
## F.1 Rule 만들기
> 아래와 같은 방법으로 Association Rules를 수행할 수 있다.
```{r}
transaction.energy <- as(tdm.energy, "transactions")
summary(transaction.energy)
rules.energy <- apriori(transaction.energy, parameter=list(supp=0.1, conf=0.3))
```
* matrix 형태의 `tdm.energy`를 **“transactions”** 형태로 변환함
* transactions 형태로 변환된 데이터를 `apriori`함수에 적용함
* `apriori()`함수 options
+ `supp` : 최소 support 값을 지정하여 그 이상의 값을 출력함
+ `conf` : 최소 confidence 값을 지정하여 그 이상의 값을 출력함
+ support = 0.1, confidence = 0.3 이상인 rule만 선택함
<br>
> `inspect()` 함수를 사용하여 rule을 확인한다.
```{r}
inspect(rules.energy)
```
* `apriori()`함수로 생성된 룰을 `inspect()`함수로 확인 할 수 있음
* **Support(지지도)** : A가 출현 할 확률
* **Confidence(신뢰도)** : A가 출현 했을 때 B가 출현 할 확률
* **Lift(향상도)** :
+ **1** : A와 B가 서로 독립적인 관계
+ **>1** : A와 B가 서로 양의 상관과계
+ **<1** : A와 B가 서로 음의 상관관계
<br>
## F.2 Redundancy Rules 제거하기
> Rule 중에는 중복 또는 부분집합의 Rule이 되어 출력되는 것이 있다.
> 이를 **"Redundant(쓸모없는) Rule"** 이라 한다.
> Redundant Rule을 제거하여 최소한의 Rule만을 선정하는 방법을 알아본다.
```{r}
subset.matrix <- is.subset(rules.energy, rules.energy)
head(subset.matrix)
```
* `rules.energy`의 대칭 행렬을 생성함
<br>
> 생성한 대칭 행렬에 하삼각 행렬을 `NA`로 변환한다.
```{r}
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
head(subset.matrix)
```
<br>
> redundant rule을 살펴 보도록 한다.
```{r}
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
```
* `redundant` 오브젝트의 **TRUE**값이 redundant rule임
* `which(redundant)`를 통해 redundant rule의 위치를 확인 할 수 있음
<br>
> redundant rule 부분을 제거하는 방법은 아래와 같다.
```{r}
rules.pruned <- rules.energy[!redundant]
inspect(rules.pruned)
```
* redundant rule을 제거한 나머지 rule들을 `rules.pruned` 오브젝트로 생성함
<br>
## F.3 Rules plot 그리기
> 아래와 같은 방법으로 정제된 Rule에 대하여 시각화 할 수 있다.
```{r}
plot(rules.pruned, method="graph", control=list(type="items"))
```
* 최종적으로 정제된 `rules.pruned`를 시각화함
* 원의 크기로 해당 단어에 대한 출현 확률을 알 수 있고, 원의 색깔 진하기로 두 단어간의 상관관계를 볼 수 있음(진할수록 두 단어간의 상관관계는 높음)
+ 원의 크기 : support(지지도)
+ 원의 색깔 : lift(향상도)
<a href="#Title">back to Top</a>
```{r, message=FALSE, results="hide"}
libs <- c("rjson", "KoNLP", "wordcloud", "RColorBrewer", "stringr", "plyr", "ggplot2", "tm", "arules", "arulesViz", "SnowballC")
unlist(lapply(libs, require, character.only = TRUE ))
unlist(lapply(libs, require, character.only = TRUE ))
install.packages("tm")
install.packages("arulesViz")
install.packages("SnowballC")
unlist(lapply(libs, require, character.only = TRUE ))
install.packages("arulesViz")
unlist(lapply(libs, require, character.only = TRUE ))
library("arulesViz", lib.loc="C:/Program Files/R/R-3.4.3/library")
remove.packages("arulesViz")
install.packages("arulesViz")
unlist(lapply(libs, require, character.only = TRUE ))
nw_in01 <- readLines('./Data/sample_news_201301.json', encoding="UTF-8")
nw_in02 <- readLines('./Data/sample_news_201302.json', encoding="UTF-8")
nw_in03 <- readLines('./Data/sample_news_201303.json', encoding="UTF-8")
tr_nw01 <- ldply(nw_in01, function(x) unlist(fromJSON(x)))
tr_nw02 <- ldply(nw_in02, function(x) unlist(fromJSON(x)))
tr_nw03 <- ldply(nw_in03, function(x) unlist(fromJSON(x)))
unlist(l_ex)
length(unlist(l_ex))
head(tr_nw01,2)
ggRadar(data=iris,aes(group=Species),colour = "#654ea3")
ggRadar(data=iris,aes(group=Species),colour = "red")
suppressPackageStartupMessages(library(dplyr))
library(scales)
library(tibble)
ggRadar(data=iris,aes(group=Species), colour = "red")
mtcars %>%
rownames_to_column( var = "group" ) %>%
mutate_at(vars(-group),funs(rescale)) %>%
tail(4) %>% select(1:10) -> mtcars_radar
ggradar(mtcars_radar)
ggRadar(mtcars_radar)
mtcars_radar
ggRadar(data=mtcars,interactive=TRUE)
ggRadar(mtcars_radar)
ggradar.size(plot.data, group_col = 1, weight_col = ncol(plot.data), grid.mid = 0.18, grid.max = 0.36, grid.min = 0, values.radar = c("0%", "18%", "36%"), legend.pos = "bottom", axis.label.size = 5, group.point.size = 2.5, group.line.width = 2, axis.label.offset = 1.15, grid.label.size = 4.5, font.radar = "ArialMT", gridline.min.colour = "grey", gridline.mid.colour = "#007A87", gridline.max.colour = "grey", background.circle.colour = "#D7D6D1", axis.line.colour = "grey40", linepoint.alpha = 0.56, background.circle.transparency = 0.2, plot.extent.x.sf = 1, plot.extent.y.sf = 1.2, gridline.min.linetype = "longdash", gridline.mid.linetype = "longdash", gridline.max.linetype = "longdash", grid.line.width = 0.5)
ggRadar(data=mtcars,interactive=TRUE)
ggRadar(data=mtcars,interactive=TRUE,  colour = "purple")
ggRadar(data=mtcars,interactive=TRUE,  colour = "#654ea3")
ggRadar(data=iris, aes(group=Species), interactive = F, colour = "#654ea3")
ggRadar(data=iris, aes(group=Species), interactive = F, colour = c("#654ea3", "#654ea3", "#654ea3"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = c("#654ea3", "#654ea4", "#654ea5"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = c("#654ea3", "#c3bcd2", "#654ea5"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = "c3bcd2")
ggRadar(data=iris, aes(group=Species), interactive = F, colour = "plum")
ggRadar(data=iris, aes(group=Species), interactive = F, colors = c("#654ea3", "#654ea3","#654ea3"))
ggRadar(data=iris, aes(group=Species), interactive = F, colours = c("#654ea3", "#654ea3","#654ea3"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = c("#654ea3", "#654ea3","#654ea3"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = c("#654ea3", "#654ea3","#654ea3"))
data_ggradar <- data.frame(c(1,2,3,4,5,6,7),
c(2,3,4,5,6,7,8))
ggRadar(data=data_ggradar, interactive = F, colour = c("#654ea3", "#654ea3","#654ea3"))
ggRadar(data=data_ggradar, interactive = F, colour = c("#654ea3", "#654ea3"))
data_ggradar <- data.frame(v1 = c(1,2,3,4,5,6,7),
v2 = c(2,3,4,5,6,7,8))
ggRadar(data=data_ggradar, interactive = F, colour = c("#654ea3", "#654ea3"))
data_ggradar
data_ggradar <- data.frame(v1 = data.frame(c(1,2,3,4,5,6,7),c(a,a,a,a,a,a,a)),
v2 = data.frame(c(2,3,4,5,6,7,8),c(b,b,b,b,b,b,b)))
ggRadar(data=data_ggradar, aes(), interactive = F, colour = c("#654ea3", "#654ea3"))
data_ggradar
data_ggradar <- data.frame(data.frame(c(1,2,3,4,5,6,7),class = c(a,a,a,a,a,a,a)),
data.frame(c(2,3,4,5,6,7,8),class = c(b,b,b,b,b,b,b)))
data_ggradar
data_ggradar1 <- data.frame(c(1,2,3,4,5,6,7),class = c(a,a,a,a,a,a,a))
data_ggradar2 <- data.frame(c(2,3,4,5,6,7,8),class = c(b,b,b,b,b,b,b))
data_ggradar1
English1=sample(50:90,100,replace=TRUE)
Math1=sample(seq(2.5,5,by=0.1),100,replace=TRUE)
History1=sample(60:80,100,replace=TRUE)
Science1=sample(seq(3,4.5,by=0.1),100,replace=TRUE)
English2=sample(55:95,100,replace=TRUE)
Math2=sample(seq(1.5,4.5,by=0.1),100,replace=TRUE)
History2=sample(70:95,100,replace=TRUE)
Science2=sample(seq(2.5,4,by=0.1),100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
English=c(English1,English2)
Math=c(Math1,Math2)
History=c(History1,History2)
Science=c(Science1,Science2)
data1=data.frame(English,Math,History,Science,Class)
head(data1)
ggRadar(data=data1, aes(Class), interactive = F, colour = c("#654ea3", "#654ea3"))
ggRadar(data=data1, aes(group=Class), interactive = F, colour = c("#654ea3", "#654ea3"))
ggRadar(data=data1, aes(group=Class), rescale = TRUE, interactive = F, colour = c("#654ea3", "#654ea3"))
ggRadar(data=data1, aes(group=Class), rescale = TRUE, interactive = F, colour = c("#654ea3", "#c3bcd2"))
# 가상의 자료 만들기(실전에서는 웹에 입력된 데이터 기반으로 csv파일 만들어서 불러오기)
English1=sample(50:90,100,replace=TRUE)
Math1=sample(seq(2.5,5,by=0.1),100,replace=TRUE)
History1=sample(60:80,100,replace=TRUE)
Science1=sample(seq(3,4.5,by=0.1),100,replace=TRUE)
English2=sample(55:95,100,replace=TRUE)
Math2=sample(seq(1.5,4.5,by=0.1),100,replace=TRUE)
History2=sample(70:95,100,replace=TRUE)
Science2=sample(seq(2.5,4,by=0.1),100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
English=c(English1,English2)
# 가상의 자료 만들기(실전에서는 웹에 입력된 데이터 기반으로 csv파일 만들어서 불러오기)
English1=sample(1:10,100,replace=TRUE)
Math1=sample(seq(1,10,by=1),100,replace=TRUE)
History1=sample(1:10,100,replace=TRUE)
Science1=sample(seq(1,10,by=1),100,replace=TRUE)
English2=sample(1:10,100,replace=TRUE)
Math2=sample(seq(1,10,by=1),100,replace=TRUE)
History2=sample(1:10,100,replace=TRUE)
Science2=sample(seq(1,10,by=1),100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
English=c(English1,English2)
Math=c(Math1,Math2)
History=c(History1,History2)
Science=c(Science1,Science2)
data1=data.frame(English,Math,History,Science,Class)
head(data1)
summary(data1)
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
# 넓은 형태를 긴 형태로. 3가지 과목을 하나의 변수(column)으로 합함.
# install.packages("reshape2")
library(reshape2)
longdf=melt(data1,id.vars="Class")
head(longdf)
# 반별, 과목별 평균 구하기
library(plyr)
df=ddply(longdf,.(Class,variable),summarize,mean(value))
colnames(df)[length(df)]="value"
df
# 그래프 그리기
ggplot(data=df,aes(x=variable,y=value,group=Class,colour=Class))+
geom_point()+geom_line()
ggplot(data=df,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_polar() # 원형 그래프로 변환
#영어와 역사는 100점 만점으로 채점이 되어 있고 수학과 과학은 5.0 만점으로 채점이 되어 있어 그래프르르 그리게 되면 수학, 과학은 영어, 역사에 비해 값이 적으므로 차이가 나지 않는 것 처럼 보인다. 이를 해결하기 위해 전체 자료를 rescale.
rescale_df=function(data,groupvar=NULL){
if(is.null(groupvar)) df=data
else df=data[,-which(names(data) %in% groupvar)]
select=sapply(df,is.numeric)
df[select]=lapply(df[select], scales::rescale)
if(!is.null(groupvar)) {
df=cbind(df,data[[groupvar]])
colnames(df)[length(df)]=groupvar
}
df
}
rescaled=rescale_df(data1)
head(rescaled)
# 다시 반별 과목별 평균
longdf2=melt(rescaled,id.vars="Class")
head(longdf2)
df2=ddply(longdf2,.(Class,variable),summarize,mean(value))
colnames(df2)[length(df2)]="value"
df2
# 다시 원형 그래프
ggplot(data=df2,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_polar()
# 새로운 좌표계의 정의
coord_radar <- function (theta = "x", start = 0, direction = 1)
{
theta <- match.arg(theta, c("x", "y"))
r <- if (theta == "x")
"y"
else "x"
ggproto("CoordRadar", CoordPolar, theta = theta, r = r, start = start,
direction = sign(direction),
is_linear = function(coord) TRUE)
}
# 새롭게 정의한 좌표계를 적용한 그래프 그리기
ggplot(data=df2,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_radar()
# y축 범위의 재설정()
ggplot(data=df2,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_radar()+ylim(0,1)+
theme(legend.position="bottom")+xlab("")+ylab("")
a1=sample(1:10,100,replace=TRUE)
b1=sample(1:10,100,replace=TRUE)
c1=sample(1:10,100,replace=TRUE)
d1=sample(1:10,100,replace=TRUE)
e1=sample(1:10,100,replace=TRUE)
f1=sample(1:10,100,replace=TRUE)
g1=sample(1:10,100,replace=TRUE)
a2=sample(1:10,100,replace=TRUE)
b2=sample(1:10,100,replace=TRUE)
c2=sample(1:10,100,replace=TRUE)
d2=sample(1:10,100,replace=TRUE)
e2=sample(1:10,100,replace=TRUE)
f2=sample(1:10,100,replace=TRUE)
g2=sample(1:10,100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
Class
# 가상의 자료 만들기(실전에서는 웹에 입력된 데이터 기반으로 csv파일 만들어서 불러오기)
a1=sample(1:10,100,replace=TRUE)
b1=sample(1:10,100,replace=TRUE)
c1=sample(1:10,100,replace=TRUE)
d1=sample(1:10,100,replace=TRUE)
e1=sample(1:10,100,replace=TRUE)
f1=sample(1:10,100,replace=TRUE)
g1=sample(1:10,100,replace=TRUE)
a2=sample(1:10,100,replace=TRUE)
b2=sample(1:10,100,replace=TRUE)
c2=sample(1:10,100,replace=TRUE)
d2=sample(1:10,100,replace=TRUE)
e2=sample(1:10,100,replace=TRUE)
f2=sample(1:10,100,replace=TRUE)
g2=sample(1:10,100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
a=c(a1,a2)
data1=data.frame(English,Math,History,Science,Class)
data1=data.frame(a,b,c,d,e,f,g)
a1=sample(1:10,100,replace=TRUE)
b1=sample(1:10,100,replace=TRUE)
c1=sample(1:10,100,replace=TRUE)
d1=sample(1:10,100,replace=TRUE)
e1=sample(1:10,100,replace=TRUE)
f1=sample(1:10,100,replace=TRUE)
g1=sample(1:10,100,replace=TRUE)
a2=sample(1:10,100,replace=TRUE)
b2=sample(1:10,100,replace=TRUE)
c2=sample(1:10,100,replace=TRUE)
d2=sample(1:10,100,replace=TRUE)
e2=sample(1:10,100,replace=TRUE)
f2=sample(1:10,100,replace=TRUE)
g2=sample(1:10,100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
a=c(a1,a2)
data1=data.frame(a,b,c,d,e,f,g)
a=c(a1,a2)
a1=sample(1:10,100,replace=TRUE)
b1=sample(1:10,100,replace=TRUE)
c1=sample(1:10,100,replace=TRUE)
d1=sample(1:10,100,replace=TRUE)
e1=sample(1:10,100,replace=TRUE)
f1=sample(1:10,100,replace=TRUE)
g1=sample(1:10,100,replace=TRUE)
a2=sample(1:10,100,replace=TRUE)
b2=sample(1:10,100,replace=TRUE)
c2=sample(1:10,100,replace=TRUE)
d2=sample(1:10,100,replace=TRUE)
e2=sample(1:10,100,replace=TRUE)
f2=sample(1:10,100,replace=TRUE)
g2=sample(1:10,100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
a=c(a1,a2)
b=c(b1,b2)
c=c(c1,c2)
d=c(d1,d2)
e=c(e1,e2)
f=c(f1,f2)
g=c(g1,g2)
data1=data.frame(a,b,c,d,e,f,g)
head(data1)
summary(data1)
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
# 넓은 형태를 긴 형태로. 3가지 과목을 하나의 변수(column)으로 합함.
# install.packages("reshape2")
library(reshape2)
longdf=melt(data1,id.vars="Class")
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
# 넓은 형태를 긴 형태로. 3가지 과목을 하나의 변수(column)으로 합함.
# install.packages("reshape2")
library(reshape2)
longdf=melt(data1,id.vars="Class")
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
head(longdf)
longdf=melt(data1,id.vars="Class")
longdf
a1=sample(1:10,100,replace=TRUE)
b1=sample(1:10,100,replace=TRUE)
c1=sample(1:10,100,replace=TRUE)
d1=sample(1:10,100,replace=TRUE)
e1=sample(1:10,100,replace=TRUE)
f1=sample(1:10,100,replace=TRUE)
g1=sample(1:10,100,replace=TRUE)
a2=sample(1:10,100,replace=TRUE)
b2=sample(1:10,100,replace=TRUE)
c2=sample(1:10,100,replace=TRUE)
d2=sample(1:10,100,replace=TRUE)
e2=sample(1:10,100,replace=TRUE)
f2=sample(1:10,100,replace=TRUE)
g2=sample(1:10,100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
a=c(a1,a2)
b=c(b1,b2)
c=c(c1,c2)
d=c(d1,d2)
e=c(e1,e2)
f=c(f1,f2)
g=c(g1,g2)
data1=data.frame(a,b,c,d,e,f,g)
head(data1)
summary(data1)
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
# 넓은 형태를 긴 형태로. 3가지 과목을 하나의 변수(column)으로 합함.
# install.packages("reshape2")
library(reshape2)
longdf=melt(data1,id.vars="Class")
head(longdf)
# 반별, 과목별 평균 구하기
library(plyr)
df=ddply(longdf,.(Class,variable),summarize,mean(value))
colnames(df)[length(df)]="value"
df
# 그래프 그리기
ggplot(data=df,aes(x=variable,y=value,group=Class,colour=Class))+
geom_point()+geom_line() # 꺾은선 그래프
a1=sample(1:10,100,replace=TRUE)
a1=sample(1:10,100,replace=TRUE)
b1=sample(1:10,100,replace=TRUE)
c1=sample(1:10,100,replace=TRUE)
d1=sample(1:10,100,replace=TRUE)
e1=sample(1:10,100,replace=TRUE)
f1=sample(1:10,100,replace=TRUE)
g1=sample(1:10,100,replace=TRUE)
a2=sample(1:10,100,replace=TRUE)
b2=sample(1:10,100,replace=TRUE)
c2=sample(1:10,100,replace=TRUE)
d2=sample(1:10,100,replace=TRUE)
e2=sample(1:10,100,replace=TRUE)
f2=sample(1:10,100,replace=TRUE)
g2=sample(1:10,100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
a=c(a1,a2)
b=c(b1,b2)
c=c(c1,c2)
d=c(d1,d2)
e=c(e1,e2)
f=c(f1,f2)
g=c(g1,g2)
data1=data.frame(a,b,c,d,e,f,g)
head(data1)
summary(data1)
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
longdf=melt(data1,id.vars="Class")
data1
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
data1=data.frame(a,b,c,d,e,f,g,Class)
head(data1)
summary(data1)
aggregate(.~Class,data1,mean) # A반과 B반의 성적 평균 보고 싶을 때
# 넓은 형태를 긴 형태로. 3가지 과목을 하나의 변수(column)으로 합함.
# install.packages("reshape2")
library(reshape2)
longdf=melt(data1,id.vars="Class")
head(longdf)
# 반별, 과목별 평균 구하기
library(plyr)
df=ddply(longdf,.(Class,variable),summarize,mean(value))
colnames(df)[length(df)]="value"
df
# 그래프 그리기
ggplot(data=df,aes(x=variable,y=value,group=Class,colour=Class))+
geom_point()+geom_line() # 꺾은선 그래프
ggplot(data=df,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_polar() # 원형 그래프로 변환
#영어와 역사는 100점 만점으로 채점이 되어 있고 수학과 과학은 5.0 만점으로 채점이 되어 있어 그래프르르 그리게 되면 수학, 과학은 영어, 역사에 비해 값이 적으므로 차이가 나지 않는 것 처럼 보인다. 이를 해결하기 위해 전체 자료를 rescale.
rescale_df=function(data,groupvar=NULL){
if(is.null(groupvar)) df=data
else df=data[,-which(names(data) %in% groupvar)]
select=sapply(df,is.numeric)
df[select]=lapply(df[select], scales::rescale)
if(!is.null(groupvar)) {
df=cbind(df,data[[groupvar]])
colnames(df)[length(df)]=groupvar
}
df
}
rescaled=rescale_df(data1)
head(rescaled)
# 다시 반별 과목별 평균
longdf2=melt(rescaled,id.vars="Class")
head(longdf2)
df2=ddply(longdf2,.(Class,variable),summarize,mean(value))
colnames(df2)[length(df2)]="value"
df2
# 다시 원형 그래프
ggplot(data=df2,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_polar()
# 새로운 좌표계의 정의
coord_radar <- function (theta = "x", start = 0, direction = 1)
{
theta <- match.arg(theta, c("x", "y"))
r <- if (theta == "x")
"y"
else "x"
ggproto("CoordRadar", CoordPolar, theta = theta, r = r, start = start,
direction = sign(direction),
is_linear = function(coord) TRUE)
}
# 새롭게 정의한 좌표계를 적용한 그래프 그리기
ggplot(data=df2,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_radar()
# y축 범위의 재설정()
ggplot(data=df2,aes(x=variable,y=value,group=Class,colour=Class,fill=Class))+
geom_point()+geom_polygon(alpha=0.4)+coord_radar()+ylim(0,1)+
theme(legend.position="bottom")+xlab("")+ylab("")
ggRadar(data=data1, aes(group=Class), interactive = F, colour = c("#654ea3", "#c3bcd2"))
English1=sample(50:90,100,replace=TRUE)
Math1=sample(seq(2.5,5,by=0.1),100,replace=TRUE)
History1=sample(60:80,100,replace=TRUE)
Science1=sample(seq(3,4.5,by=0.1),100,replace=TRUE)
English2=sample(55:95,100,replace=TRUE)
Math2=sample(seq(1.5,4.5,by=0.1),100,replace=TRUE)
History2=sample(70:95,100,replace=TRUE)
Science2=sample(seq(2.5,4,by=0.1),100,replace=TRUE)
Class=c(rep("A",100),rep("B",100))
English=c(English1,English2)
Math=c(Math1,Math2)
History=c(History1,History2)
Science=c(Science1,Science2)
data1=data.frame(English,Math,History,Science,Class)
head(data1)
ggRadar(data=data1, aes(group=Class), interactive = F, colour = c("#654ea3", "#c3bcd2"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = "#654ea3"))
ggRadar(data=iris, aes(group=Species), interactive = F, colour = "#654ea3")
ggRadar(data=iris, interactive = F, colour = "#654ea3")
ggRadar(data=iris, interactive = F, colour = "#654ea3", size = 16)
ggRadar(data=iris, interactive = F, colour = "#654ea3", size = 1)
ggRadar(data=iris, interactive = F, colour = "#654ea3", fontsize = 16)
ggRadar(data=iris, interactive = F, colour = "#654ea3", labels(16))
ggRadar(data=iris, interactive = F, colour = "#654ea3", grid.labels(16))
ggRadar(data=iris, interactive = F, colour = "#654ea3")+
theme(text = element_text(size=20)
)
